

CocosArmature = class("CocosArmature", function()
	return display.newLayer()
end)

CocosArmature.baseFolder = "armature/"
CocosArmature.fileExtensionName = ".ExportJson"

CocosArmature.funcCaller = nil
CocosArmature.mainArmature = nil
CocosArmature.registedFrameEventHandlers = {}
CocosArmature.registedMovementEventHandlers = {}


function CocosArmature:createArmature(params, caller)
	--dump(params)
	--animationName, actionName, frameEventHandlers, movementEventHandlers,

	local cocosArmature = CocosArmature.new(params, caller)
	local animationName = params.animationName
	local frameEventHandlers = params.frameEventHandlers or {}
	local movementEventHandlers = params.movementEventHandlers or {}
	local exportFileType = params.exportFileType or "COCOSTUDIO"
	cocosArmature.funcCaller = caller
    cocosArmature:setAnchorPoint(0, 0)
    CCArmatureDataManager:sharedArmatureDataManager():addArmatureFileInfo(CocosArmature.baseFolder..animationName..CocosArmature.fileExtensionName)
    cocosArmature.mainArmature = CCArmature:create(animationName)
    cocosArmature:setContentSize(cocosArmature.mainArmature:getContentSize())
    cocosArmature.mainArmature:getAnimation():setFrameEventCallFunc(handler(cocosArmature, cocosArmature.onFrameEvent))
    cocosArmature.mainArmature:getAnimation():setMovementEventCallFunc(handler(cocosArmature, cocosArmature.onMovementEvent))
    cocosArmature.registedFrameEventHandlers = frameEventHandlers
    cocosArmature.registedMovementEventHandlers = movementEventHandlers
    --armature:getAnimation():play(actionName)
    cocosArmature.mainArmature:addTo(cocosArmature)
    return cocosArmature
end
function CocosArmature:ctor(params, caller)

	local animationName = params.animationName
	local frameEventHandlers = params.frameEventHandlers or {}
	local movementEventHandlers = params.movementEventHandlers or {}
	local exportFileType = params.exportFileType or "COCOSTUDIO"
	self.funcCaller = caller
    self:setAnchorPoint(0, 0)
    CCArmatureDataManager:sharedArmatureDataManager():addArmatureFileInfo(CocosArmature.baseFolder..animationName..CocosArmature.fileExtensionName)
    self.mainArmature = CCArmature:create(animationName)
    self:setContentSize(self.mainArmature:getContentSize())
    self.mainArmature:getAnimation():setFrameEventCallFunc(handler(self, self.onFrameEvent))
    self.mainArmature:getAnimation():setMovementEventCallFunc(handler(self, self.onMovementEvent))
    self.registedFrameEventHandlers = frameEventHandlers
    self.registedMovementEventHandlers = movementEventHandlers
    --armature:getAnimation():play(actionName)
    self.mainArmature:addTo(self)
end
function CocosArmature:play(actionName)
	self.mainArmature:play(actionName)
end
function CocosArmature:onFrameEvent(bone, frameEventName, origFrameIndex, currFrameIndex)
	local armature = bone:getArmature()
	print("callback_all_frame", armature, frameEventName, origFrameIndex, currFrameIndex)
	table.foreach(self.registedFrameEventHandlers, function(_frameEventName, _function)
		--print(animationName, functionTable)
		--dump("armature:", armature)
		--dump("self:", self)
		--dump(functionTable)
		if frameEventName == _frameEventName then
			handler(self.funcCaller, _function)()
		end
	end)
end

function CocosArmature:onMovementEvent(armature, movementType, movementId)
	--dump(armature)
	table.foreach(self.registedMovementEventHandlers, function(_movementType, _function)
		--dump(functionTable)
		if movementType == _movementType then
			handler(self.funcCaller, _function)()
		end
	end)
end

function CocosArmature:remArmature(animationName)
	self.registedFrameEventHandlers[animationName] = nil
	self.registedMovementEventHandlers[animationName] = nil
end

return CocosArmature